---
name: build-tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
    HOSTNAME: 0.0.0.0
    PORT: 8001
    ENV: test
    JWT_SECRET: ${{ secrets.JWT_SECRET }}
    DATABASE_URI: ${{ secrets.DATABASE_URI }}
    TEST_DATABASE_URI: ${{ secrets.TEST_DATABASE_URI }}
    TEST_FLAG: true
    POSTGRES_DB: ${{ secrets.DATABASE_NAME }}
    POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
    POSTGRES_USER: ${{ secrets.DATABASE_USER }}
    POSTGRES_HOST: 127.0.0.1

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.9", "3.10"]

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: the_village_test
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_HOST: 127.0.0.1
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
        # Checkout the latest code from the repo
      - name: Checkout repo
        uses: actions/checkout@v2
        # Setup which version of Python to use
      - name: Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        # Display the Python version being used
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"
        # Install the poetry
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.13
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up cache
        uses: actions/cache@v2
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
        # Install packages in pyproject.toml file
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Setup database
        run: |
        chmod +x ./scripts/prestart.sh
        poetry run ./scripts/prestart.sh

      - name: Runnning app tests
        run: poetry run ./scripts/test.sh
